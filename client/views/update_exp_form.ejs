<!DOCTYPE html>
<%- include('partials/header.ejs') %>
<body>
<%- include('partials/connection_warning.ejs') %>
<div class="popup-window">
  <h2 id="formTitle"></h2>

  <form id="batchForm" class="popup-form">
    <label for="title">Title:</label><br>
    <input type="text" id="title" name="title"><br>
    
    <div class="alert" id="cageWarning">
      <strong>Trials exist for this experiment</strong> Can't modify the cages for this experiment.
    </div>
    <div id="cageDiv">
      <input type="button" value="Paste cage info" id="pasteInfoBtn" class="popup-button">
      <div id="pasteArea" style="display: none;">
        <p>format : 'cage number' 'mouse id' 'zigosity' 'treatment (optional)'</p>
        <textarea id="pasteBox" rows="10" cols="30"></textarea>
        <input type="button" value="Apply" id="applyPasteBtn" class="popup-button">
      </div>

      <div class="widget-container">
        <input type="button" value="Add row" id="addRowBtn" class="widget-button">
        <input type="button" value="Delete selected rows" id="deleteRowsBtn" class="widget-button">
        <div id="cageGrid"></div>
      </div>
    </div>

    <input type="submit" value="Save" class="popup-submit-button">
    <input type="button" value="Cancel" id="cancelBtn" class="popup-cancel-button">
  </form>

  <script>
    $(document).ready(function () {
      let dispatchUpdate = function(id) {
        localStorage.setItem('expUpdate', JSON.stringify({date : new Date, id }));
      };

      let exp = <%- JSON.stringify(exp) %>;
      let cage_info = <%- JSON.stringify(cage_info) %>;
      let nruns = <%- parseInt(nruns) %>;

      if (nruns) {
        $("#addRowBtn").prop('disabled', true);
        $("#deleteRowsBtn").prop('disabled', true);
        $("#pasteInfoBtn").prop('disabled', true);
        $("#cageDiv").show();
      } else {
        $("#cageWarning").hide();
      }

      // Initialize the grid
      let source = {
        localdata: cage_info,
        datafields: [
          { name: 'cage_nb', type: 'string' },
          { name: 'ucb_identifier', type: 'string' },
          { name: 'zigosity', type: 'string' },
          { name: 'treatment', type: 'string' },
        ],
        datatype: 'json'
      };

      let dataAdapter = new $.jqx.dataAdapter(source);

      $("#cageGrid").jqxGrid({
        width: '100%',
        source: dataAdapter,
        editable: !nruns,
        selectionmode: nruns > 0 ? 'none' : 'checkbox',
        columns: [
          { text: 'Cage number', datafield: 'cage_nb', editable: !nruns,
            validation: function (cell, value) {
              if (isNaN(value)) {
                  return { result: false, message: "Must be a number" };
              }
              return true;
          }},
          { text: 'Mouse ID', datafield: 'ucb_identifier', editable: !nruns,
            validation: function (cell, value) {
              if (isNaN(value)) {
                  return { result: false, message: "Must be a number" };
              }
              return true;
          }},
          { text: 'Group', datafield: 'zigosity' },
          { text: 'Treatment', datafield: 'treatment'}
      ]
      });

      $("#addRowBtn").click(function () {
          let datarow = {};
          datarow.cage_nb = "";
          datarow.ucb_identifier = "";
          datarow.zigosity = "";
          datarow.treatment = "";
          $("#cageGrid").jqxGrid('addrow', null, datarow, 'first');
      });

      $("#deleteRowsBtn").click(function () {
        let selectedRowIndexes = $("#cageGrid").jqxGrid('getselectedrowindexes');
        let selectedRowIds = selectedRowIndexes.map(index => $("#cageGrid").jqxGrid('getrowid', index));
        for (let i = 0; i < selectedRowIds.length; i++) {
          $("#cageGrid").jqxGrid('deleterow', selectedRowIds[i]);
        }
        $("#cageGrid").jqxGrid('clearSelection');
      });

      // Ensure ucb_identifier uniqueness
      $("#cageGrid").on('cellvaluechanged', function (event) {
        let args = event.args;
        if(args.datafield === 'ucb_identifier'){
          let rows = $("#cageGrid").jqxGrid('getrows');
          let occurrences = rows.filter(row => row.ucb_identifier === args.newvalue);
          if(occurrences.length > 1){
            alert("UCB identifier must be unique.");
            $("#cageGrid").jqxGrid('setcellvalue', args.rowindex, args.datafield, args.oldvalue);
          }
        }
      });

      $('#title').val(exp.title);
      $('#formTitle').text('Update experiment');

      $("#pasteInfoBtn").click(function () {
        // Show the paste area when the button is clicked
        $("#pasteArea").show();
      });

      $("#applyPasteBtn").click(function () {
        // Parse the textarea content and update the grid
        let rawContent = $("#pasteBox").val();
        let lines = rawContent.split('\n');

        // Prepare the array for new cage info data
        let newCageInfo = [];

        // Process each line
        for (let i = 0; i < lines.length; i++) {
          // If the line is empty or contains only white-space characters, skip it
          if (lines[i].trim() === '') {
              continue;
          }

          let parts = lines[i].split('\t');
          if (parts.length === 3 || parts.length === 4) {
            let treatment = "";
            if (parts.length === 4)
              treatment = parts[3].trim();
            // Check if the first two parts are numbers
            if (!isNaN(parts[0]) && !isNaN(parts[1])) {
              newCageInfo.push({
                cage_nb: parts[0].trim(),
                ucb_identifier: parts[1].trim(),
                zigosity: parts[2].trim(),
                treatment
              });
            } else {
              if (newCageInfo.length > 0) {
                // If the format is wrong, show an error message
                alert('Wrong format on line ' + (i + 1) + '. Expected format: number, number, string');
                return;
              }
            }
          } else {
            // If it is the first line and doesn't have the correct number of columns, skip it
            if (i == 0 && parts.length !== 3 && parts.length !== 4) {
              continue;
            }
            // If the number of columns is not 3, show an error message
            alert('Wrong number of columns on line ' + (i + 1));
            return;
          }
        }

        // Update the source of the grid and refresh it
        source.localdata = newCageInfo;
        $("#cageGrid").jqxGrid({ source: new $.jqx.dataAdapter(source) });

        // Clear the paste box and hide the paste area
        $("#pasteBox").val('');
        $("#pasteArea").hide();
      });

      $('#batchForm').on('submit', function (e) {
        e.preventDefault();
        let title = $('#title').val();
        if (title != null && title !== "") {
          // include the current grid data in the ajax call
          const new_info = $("#cageGrid").jqxGrid('getrows').map(row => ({
            cage_nb: parseInt(row.cage_nb),
            ucb_identifier: parseInt(row.ucb_identifier),
            zigosity: row.zigosity,
            treatment: row.treatment
          }));;
          

          $.ajax({
            url: '/study/<%= study_id %>/experiment/' + exp.id,
            type: 'PUT',
            data: {title, cage_info: JSON.stringify(new_info)},
            success: function (data) {
              dispatchUpdate(data.id);
              window.close(); // close this popup window
            },
            error: function(jqXHR)
            {
                let json = JSON.parse(jqXHR.responseText);
                alert(json.error);
            }
          });
        } else {
          alert("The experiment title can't be empty");
        }
      });

      $('#cancelBtn').click(function () {
        window.close();
      });
    });
  </script>
</div>
</body>
</html>